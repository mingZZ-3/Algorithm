[04] 정렬 알고리즘
1. 정렬 알고리즘
    - 정렬이란 데이터를 특정한 기준에 따라 순서대로 나열하는 것

2. 선택 정렬
    - 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복
    - 시간 복잡도 : O(N^2), 공간 복잡도 : O(N)
    '''
    for i in range(len(array)):
        min_index = i # 가장 작은 원소의 인덱스
        for j in range(i+1, len(array)):
            if array[min_index] > array[j]:
                min_index = j
        array[i], array[min_index] = array[min_index], array[i]
    '''

3. 삽입 정렬
    - 처리되지 않은 데이터를 하니씩 고랄 적절한 위치에 삽입
    - 선택 정렬보다 효율적
    - 시간 복잡도 : O(N^2), 공간 복잡도 : O(N)
    '''
    for i in range(1, len(array)):
        for j in range(i, 0, -1):
            if array[j] < array[j-1]:
                array[j], array[j-1] = array[j-1], array[j]
            else:
                break
    '''

4. 퀵 정렬
    - 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법
    - 가장 기본은 첫번째 데이터를 기준 데이터(Pivot)로 설정
    - 시간 복잡도: O(NlogN) // 최악의 경우, O(N^2)
    '''
    def quick_sort(array, start, end):
        if start >= end: # 원소가 1개인 경우 종료
            return
        pivot = start
        left = start + 1
        right = end
        while (left <= right):
            # 피벗보다 큰 데이터를 찾을 때까지 반복
            while (left <= end and array[left] <= array[pivot]):
                left += 1
            # 피벗보다 작은 데이터를 찾을 때까지 반복
            while (right > start and array[right] >= array[pivot]):
                right -= 1
            if (left > right): # 엇갈렸다면 작은 데이터와 피벗을 교체
                array[right], array[pivot] = array[pivot], array[right]
                pivot = right
            else: # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
                array[left], array[right] = array[right], array[left]
        quick_sort(array, start, pivot-1)
        quick_sort(array, pivot+1, end)
    quick_sort(array, 0, len(array)-1)
    '''
    ''' Short - python
    def quick_sort(array):
        if len(array) <= 1:
            return array
        pivot = array[0]
        tail = array[1:] # 피벗 제외

        left_side = [x for x in tail if x <= pivot]
        right_side = [x for x in tail if x > pivot]
        return quick_sort(left_side) + [pivot] + quick_sort(right_side)
    '''

5. 계수 정열
    - 특정한 조건에 부합할 때만 사용가능. but, 매우 빠름.
    - 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용
    - 데이터의 수가 N, 데이터(양수)의 최댓값이 K 일때, 시간&공간 복잡도는 O(N+K)
    - 동일한 값을 가진 여러 데이터가 여러개 등장할 때 효과적
    '''
    count = [0] * (len(array)+1)
    for i in range(len(array)):
        count[array[i]] += 1
    for i in range(len(count)):
        for j in range(count[i]):
            print(i, end="")
    '''