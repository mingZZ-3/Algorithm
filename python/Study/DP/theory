[06] DP (Dynamic Programming)
1. 다이나믹 프로그래밍
    - 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
    - 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하고 다시 계산하지 않는다.
    - 동적 계획법이라고도 함.
    - 조건
        - 최적 부분 구조 (Optimal Substructure)
            : 큰 문제를 작은 문제로 나눌 수 있으며, 작은 문제의 답을 모아서 큰 문제 해결 가능.
        - 중복되는 부분 문제 (Overlapping Subproblem)
            : 동일한 작은 문제를 반복적으로 해결해야 함.
    ex) 피보나치 수열 -> DP 적용 전 시간 복잡도는 O(2^N)

2. 메모이제이션 (Memoization)
    - 하향식_탑다운, DP를 구현하는 방법 중 하나
    - 한번 계산한 결과를 메모리 공간에 메모하는 기법 -> 캐싱(Caching)

3. 탑다운 vs. 바텀업
    - 탑다운(메모이제이션) 방식은 하향식(재귀 많음). 바텀업 방식은 상향식(for문 많은).
    - DP의 전형적인 형태는 바텀업
        - 결과 저장용 리스트는 DP 테이블이라고 부름.
    - 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념

4. 가장 긴 증가하는 부분 수열 (Longest Increasing Subsequence, LIS)
    - 전형적인 다이나믹 프로그래밍 문제의 아이디어
    - array = [4,2,5,8,11,15]의 수열을 가장 긴 증가하는 수열로 바꾸면 [4,5,8,11,15] 이다.
    - 점화식
	- D[i] = array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이
	- 모든 0<=j<i 에 대하여, D[i] = max(D[i], D[j] + 1) if array[j] < array[i]

- DP vs. 분할 정복(퀵_pivot)의 차이
    - 부분 문제의 중복이 있으면 DP, 없으면 분할 정복.