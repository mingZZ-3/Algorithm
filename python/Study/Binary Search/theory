[05] 이진 탐색
1. 이진 탐색
    - 순차 탐색 : 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인
    - 이진 탐색 : 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색
        - 시작점, 끝점, 중간점을 이용하여 탐색 범위 설정
        - 시간 복잡도 : O(logN)
    '''
    def binary_search(array, target, start, end):
        if start > end:
            return None
        mid = (start + end) // 2

        # 비교 연산
        if array[mid] == target:
            return mid
        elif array[mid] > target:
            return binary_search(array, target, start, mid-1)
        else:
            return binary_search(array, target, mid+1, end)
    '''

2. 라이브러리
    - bisect_left(a, x) : 정렬 순서를 유지하며, 배열 a에서 x를 삽입할 가장 왼쪽 index
    - bisect_right(a, x) : 정렬 순서를 유지하며, 배열 a에서 x를 삽입할 가장 오른쪽 index
        - 특정 범위에 속하는 데이터 개수 구하기
        '''
        def count_by_range(a, left_value, right_value):
            left_index = bisect_left(a, left_value)
            right_index = bisect_right(a, right_value)
            return right_index - left_index
        '''

3. 파라메트릭 서치 (Parametric Search)
    - 최적화 문제를 결정 문제(Y/N)로 바꾸어 해결하는 기법
    ex) 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
        - 이진 탐색을 이용하여 해결