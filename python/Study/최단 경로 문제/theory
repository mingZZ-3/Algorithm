[07] 최단 경로 문제
1. 최단 경로 문제
    - 가장 짧은 경로를 찾는 알고리즘
    - 다양한 문제 상황
        - 한 지점에서 다른 한 지점까지의 최단 경로
        - 한 지점에서 다른 모든 지점까지의 최단 경로
        - 모든 지점에서 다른 모든 지점까지의 최단 경로
    - 각 지점은 그래프에서 노드로 표현
    - 지점 간 연결된 도로는 그래프에서 간선으로 표현

2. 다익스트라 최단 경로
    (1) 개요
        - 특정한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산
        - 음의 간산이 없을 때 정상적으로 동작
            - 현실의 도로(간선)은 음의 간선으로 표현되지 않음.
        - 그리디 알고리즘으로 분류
            - 매 상황에서 가장 비용이 적은 노드를 선택해 임의의 과정을 반복

    (2) 동작 과정
        - 1. 출발 노드 설정
        - 2. 최단 거리 테이블을 초기화 : 기본 무한으로 설정. 자신으로 가는 노드 0
        - 3. 방문하지 않은 노드 중 최단 거리가 가장 짧은 노드 선택
        - 4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신
        - 5. 3, 4번 반복
      - 알고리즘 동작 과정에서 최단 거리 테이블은 각 노드에 대한 현재까지의 최단 거리 정보를 가지고 있음

    (3) 특징
        - 그리디 알고리즘 : 매 상황에서 방문하지 않은 가장 비용이 적은 노드를 선택해 임의의 과정을 반복
        - 단계를 거치며 한 번 처리된 노드의 최단 거리는 고정되어 더 이상 바뀌지 않음.
            - 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해
        - 다익스트라 알고리즘을 수행한 뒤에 테이블에 각 노드까지의 최단 거리 정보가 저장됨
            - 완벽한 형태의 최단 경로를 구하려면 소스코드에 추가적인 기능을 더 넣어야 함.
        - 시간 복작도 : O(V^2) _ V는 노드의 개수

3. 우선순위 큐 (Priority Queue)
    - 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조
    - ex) 여러개의 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건 데이터부터 꺼내서 확인해야 하는 경우에 이용
    - 표준 라이브러리 지원

    (1) 힙 : Heap
        - 우선순위 큐를 구현하기 위해 사용하는 자료구조 중 하나
        - 최소 힙(Min Heap)과 최대 힙(Max Heap)이 있음.
        - 다익스트라 최단 경로를 포함 다양한 알고리즘에서 사용
            - 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해 사용
            - 최소 힙 사용
        - 데이터 삽입/삭제 시간 : O(logN)
        - 시간 복잡도 : O(ElogV) _ E는 노드의 개수
            - 우선순위 큐에서 꺼낸 노드와 연결된 다른 노드들을 확인하는 총횟수는 최대 간선의 개수만큼 연산
            - 중복 간선을 포함하지 않는 경우
        '''
        import heapq
        # 기본 오름차순
        def heapsort(iterable):
            h = []
            result = []
            # 모든 원소를 차례대로 힙에 삽입
            for value in iterable:
                heapq.heappush(h, value) # 내림 차순 : (h, -value)
            # 힙에 삽입된 모든 원소 차례대로 꺼내기
            for i in range(len(h)):
                result.append(heapq.heappop(h)) # 내림 차순 : (-heapq.heappop(h))
            return result
        result = heapsort([1, 3, 5, 7, 2])
        '''

4. 플로이드 워셜 알고리즘
    - 모든 노드에서 다른 모든 노드까지의 최단 경로
    - 다익스트라와 마찬가지로 단계별로 거쳐 가는 노드를 기준으로 알고리즘을 수행
        - 다만 매 단계마다 방문하지 않은 노드 중에 최단 거리를 갖는 노드를 찾는 과정이 필요하지 않음
    - 2차원 테이블에 최단 거리 정보를 저장
    - 점화식
        - 각 단계마다 특정한 노드 k를 거쳐 가는 경우 확인
        - a에서 b로 가는 최단 거리보다 a에서 k를 거쳐 b로 가는 거리가 더 짧은지 검사
        - D_ad = min(D_ab, D_ak + D_kb)
    - 시간 복잡도 : O(N^3)
        - 노드와 간선의 수가 많으면 다익스트라를 써야 해결 가능