[08] 기타 그래프 이론
1. 서로소 집합 (Disjoint Sets)
    - 서로소 집합란 공통 원소가 없는 두 집합 의미
    - 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
    - 합치기 찾기(Union Find) 자로구조
        - 합집합 : 두 개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산
        - 찾기 : 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산
    - 합치기 동작 과정
        1. 합집합 연산을 확인하여, 서로 연결된 두 노드 A, B를 확인
            1) A와 B의 루트 노드 A', B'를 각각 찾음
            2) A'를 B'의 부모 노드로 설정
        2. 모든 합집합 연산을 처리할 때 까지 1번 과정 반복
    - 연결성
        - 기본적인 형태의 서로소 집합 자료구조에서 루트노드에 즉시 접근할 수 없음
        - 루트 노드를 찾기 위해 부모 테이블을 계속해서 확인하며 거슬러 올라가야함

2. 서로소 집합을 활용한 사이클 판별
    - 서로소 집합은 무방향 그래프 내에서의 사이클을 판별할 때 사용할 수 있음
        - 참고 : 방향 그래프에서의 사이클 여부는 DFS
    - 과정
        1. 각 간선을 하나씩 확인하며 두 노드의 루트 노드 확인
            1) 루트 노드가 서로 다르다면, 두 노드에 대하여 합집합 연산 수행
            2) 루트 노드가 같다면, 사이클(Cycle) 발생
        2. 그래프에 포함되어 있는 모든 간선에 대하여 1번 반복

3. 신장 트리
    - 그래프에서 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프
    - 모든 노드가 포함되어 서로 연결되면서 사이클이 존재하지 않는다는 조건은 '트리'의 조건

    1) 최소 신장 트리
        - 최소한의 비용으로 구성되는 신장 트리를 찾기
          ex) N개의 도시가 존재하는 상황에서 두 도시 사이에 도로를 놓아 전체 도시가 서로 연결될 수 있게 다리 설치하기
        --> 크루스칼 알고리즘

4. 크루스칼 알고리즘
    - 대표적인 최소 신장 트리 알고리즘. Greedy
    - 과정
        1. 간선 데이터를 비용에 따라 오름차순 정렬
        2. 간선을 하나씩 확인하며 현재의 간선이 사이클을 발생시키는지 확인
            1) 사이클이 발생하지 않는 경우, 최소 신장 트리에 포함
            2) 사이클이 발생하는 경우, 최소 신장 트리에 포함 x
        3. 모든 간선에 대하여 2번 반복
    - 시간 복잡도 : O(ElogE) _ E 는 간선
        - 크루스칼 알고리즘에서 가장 많은 시간을 요구하는 곳은 간선 정렬을 수행하는 부분.

5. 위상 정렬 _ DFS / 큐
    - 사이클이 없는 방향 그래프의 모든 노드를 방향성에 거스르지 않도록 순서대로 나열하는 것
      ex) 선수 과목을 고려한 학습 순서 설정
    - 진입차수(Indegree) : 특정한 노드로 들어오는 간선의 개수
    - 진출차수(Ourdegree) : 특정한 노드에서 나가는 간선의 개수
    - 과정
        1. 진입차수가 0인 모든 노드를 큐에 넣음
        2. 큐가 빌 때까지 다음의 과정 반복
            1) 큐에서 원소를 꺼내 해당 노드에서 나가는 간선을 그래프에서 제거
            2) 새롭게 진입차수가 0이 된 노드를 큐에 넣음
        --> 결과적으로 각 노드가 큐에 들어온 순서가 위상 정렬을 수행한 결과와 동일

    1) 특징
        - DAG에 대해서만 수행
            - DAG(Direct Acyclic Graph) : 순환하지 않는 방향 그래프
        - 여러가지 답이 존재
            - 한 단계에서 큐에 새롭게 들어가는 원소가 2개 이상인 경우, 여러 답 존재
        - 모든 원소를 방문하기 전에 큐가 빈다면 사이클이 존재한다고 판단
        - 스택을 활용한 DFS를 이용해 수행할 수 있음.
        - 시간 복잡도 : O(E + V)